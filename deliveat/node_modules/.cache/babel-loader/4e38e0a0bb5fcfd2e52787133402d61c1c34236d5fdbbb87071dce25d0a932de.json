{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nexport function useLogInLogic() {\n  _s();\n  const [emailError, setEmailError] = useState(false);\n  const [emailErrorMessage, setEmailErrorMessage] = useState('');\n  const [passwordError, setPasswordError] = useState(false);\n  const [passwordErrorMessage, setPasswordErrorMessage] = useState('');\n  const validateInputs = () => {\n    const email = document.getElementById('email');\n    const password = document.getElementById('password');\n    let isValid = true;\n    if (!email.value || !/\\S+@\\S+\\.\\S+/.test(email.value)) {\n      setEmailError(true);\n      setEmailErrorMessage('Please enter a valid email address.');\n      isValid = false;\n    } else {\n      setEmailError(false);\n      setEmailErrorMessage('');\n    }\n    if (!password.value || password.value.length < 6) {\n      setPasswordError(true);\n      setPasswordErrorMessage('Password must be at least 6 characters long.');\n      isValid = false;\n    } else {\n      setPasswordError(false);\n      setPasswordErrorMessage('');\n    }\n    return isValid;\n  };\n  const tryManagerLogin = async (email, password) => {\n    const res = await fetch('/api/manager/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!res.ok) throw new Error('not-manager');\n    return res.json(); // { token, user:{role,email} }\n  };\n  const tryRiderLogin = async (email, password) => {\n    const res = await fetch('/api/rider/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!res.ok) throw new Error('rider-failed');\n    return res.json();\n  };\n  const handleSubmit = async event => {\n    if (!validateInputs()) {\n      event.preventDefault();\n      return;\n    }\n    event.preventDefault();\n    const data = new FormData(event.currentTarget);\n    const email = data.get('email');\n    const password = data.get('password');\n    try {\n      const mgr = await tryManagerLogin(email, password);\n      localStorage.setItem('token', mgr.token);\n      localStorage.setItem('role', 'manager');\n      window.location.assign('/dashboard'); // mostra Dashboard.jsx\n      return;\n    } catch {/* non è manager → prova rider */}\n    try {\n      const rid = await tryRiderLogin(email, password);\n      localStorage.setItem('token', rid.token);\n      localStorage.setItem('role', 'rider');\n      // window.location.assign('/rider');\n    } catch {\n      setPasswordError(true);\n      setPasswordErrorMessage('Credenziali non valide.');\n    }\n  };\n  return {\n    emailError,\n    emailErrorMessage,\n    passwordError,\n    passwordErrorMessage,\n    validateInputs,\n    handleSubmit\n  };\n}\n_s(useLogInLogic, \"8lALrhpE+iB6bgXUiVde/c8yUN4=\");","map":{"version":3,"names":["useState","useLogInLogic","_s","emailError","setEmailError","emailErrorMessage","setEmailErrorMessage","passwordError","setPasswordError","passwordErrorMessage","setPasswordErrorMessage","validateInputs","email","document","getElementById","password","isValid","value","test","length","tryManagerLogin","res","fetch","method","headers","body","JSON","stringify","ok","Error","json","tryRiderLogin","handleSubmit","event","preventDefault","data","FormData","currentTarget","get","mgr","localStorage","setItem","token","window","location","assign","rid"],"sources":["C:/Users/domen/OneDrive/Documenti/GitHub/DelivEat/deliveat/src/Components/GestionePersonale/LogInLogic.jsx"],"sourcesContent":["import { useState } from 'react';\r\n\r\nexport function useLogInLogic() {\r\n  const [emailError, setEmailError] = useState(false);\r\n  const [emailErrorMessage, setEmailErrorMessage] = useState('');\r\n  const [passwordError, setPasswordError] = useState(false);\r\n  const [passwordErrorMessage, setPasswordErrorMessage] = useState('');\r\n\r\n  const validateInputs = () => {\r\n    const email = document.getElementById('email');\r\n    const password = document.getElementById('password');\r\n    let isValid = true;\r\n\r\n    if (!email.value || !/\\S+@\\S+\\.\\S+/.test(email.value)) {\r\n      setEmailError(true); setEmailErrorMessage('Please enter a valid email address.');\r\n      isValid = false;\r\n    } else { setEmailError(false); setEmailErrorMessage(''); }\r\n\r\n    if (!password.value || password.value.length < 6) {\r\n      setPasswordError(true); setPasswordErrorMessage('Password must be at least 6 characters long.');\r\n      isValid = false;\r\n    } else { setPasswordError(false); setPasswordErrorMessage(''); }\r\n\r\n    return isValid;\r\n  };\r\n\r\n  const tryManagerLogin = async (email, password) => {\r\n    const res = await fetch('/api/manager/login', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ email, password })\r\n    });\r\n    if (!res.ok) throw new Error('not-manager');\r\n    return res.json(); // { token, user:{role,email} }\r\n  };\r\n\r\n  const tryRiderLogin = async (email, password) => {\r\n    const res = await fetch('/api/rider/login', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ email, password })\r\n    });\r\n    if (!res.ok) throw new Error('rider-failed');\r\n    return res.json();\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    if (!validateInputs()) { event.preventDefault(); return; }\r\n    event.preventDefault();\r\n\r\n    const data = new FormData(event.currentTarget);\r\n    const email = data.get('email');\r\n    const password = data.get('password');\r\n\r\n    try {\r\n      const mgr = await tryManagerLogin(email, password);\r\n      localStorage.setItem('token', mgr.token);\r\n      localStorage.setItem('role', 'manager');\r\n      window.location.assign('/dashboard'); // mostra Dashboard.jsx\r\n      return;\r\n    } catch { /* non è manager → prova rider */ }\r\n\r\n    try {\r\n      const rid = await tryRiderLogin(email, password);\r\n      localStorage.setItem('token', rid.token);\r\n      localStorage.setItem('role', 'rider');\r\n      // window.location.assign('/rider');\r\n    } catch {\r\n      setPasswordError(true);\r\n      setPasswordErrorMessage('Credenziali non valide.');\r\n    }\r\n  };\r\n\r\n  return {\r\n    emailError, emailErrorMessage,\r\n    passwordError, passwordErrorMessage,\r\n    validateInputs, handleSubmit\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}